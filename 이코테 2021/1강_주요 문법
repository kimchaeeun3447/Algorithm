### 실수형

2진수에서는 0.9를 정확히 표현할 수 있는 방법이 없다! 미세한 오차가 발생한다.

→ **`a=0.3+0.6` 일때, `a==0.9` → False 이다!** 0.8999999999999999로 계산된다.

 **따라서 반올림 함수 round()를 사용해야한다. `round(a, 4)==0.9` → True이다.**

 

**round(a, 4)** → 소수점 아래 셋째자리에서 반올림

### 리스트 컴프리헨션

N x M 크기의 2차원 리스트 : N행 M열

`array = [[0] * m  for _ in range(n)]

### 리스트 메서드 기억하자

a.append() → 맨뒤에 하나 삽입

a.sort(), a.sort(reverse=True) → 기본이 오름차순 정렬

a.reverse() → 리스트 원소 순서 뒤집기

a.insert(인덱스, 특정 값)

a.count(특정 값) → 특정 값 개수 세기

a.remove(특정 값) → 특정 값 제거, 여러개면 하나만 제거

### 튜플

- 튜플이 리스트보다 공간적으로 효율적이다! → 메모리를 덜사용한다는 뜻
- 튜플은 수정이 안된다.

**튜플을 사용하면 좋은 경우**

- 서로 다른 성질의 데이터를 묶어서 관리할 떄
    - 최단 경로 알고리즘 → (비용, 노드 번호)형태로 자주 씀
- 딕셔너리의 키값으로 데이터의 나열을 써야할 때
- 리스트보다 메모리를 효율적으로 써야할 때

### 딕셔너리

- 데이터 조회나 수정할 때 O(1) 만에 처리가능
- 특정 키 존재 확인 : `if '키이름' in data:`
- 딕셔너리에서 리스트만들기 `list(data.keys())`, `list(data.values())`
- 초기화 `dict()`

### 사용자에게 입력 최대한 빠르게 받기

- **입력의 개수가 매우 많은 경우 readline() 함수를 쓰자!**

```python
import sys 

data = sys.stdin.readline().rstrip()
```

### f-string

`print(*f"*정답은 **{변수}"**)`

### 내장함수

`add(2,3)` `substract(3,7)` 

### 함수 내 전역변수사용

- 전역변수를 함수내에서 출력하는 경우엔 상관x
- 전역변수를 함수내에서 수정하고 싶다! → `global 변수` 한 후 사용해야한다.

### 함수에서 여러개의 return 값을 가질 수 있음

```python
def op(a,b):
	return a+b, a-b, a*b #packing

a, b, c = op(1,2) # unpacking
```

### 람다 표현식

`print(**lambda x, y: x+y**)(**1, 2**))`

- **람다를 자주 쓰는 예시**
    - **튜플 원소를 갖는 리스트를 sorted()로 정렬할 때 !**
    
    ```python
    array = [(’a’, 10), (’b’, 20), (’c’, 30)]
    
    print(sorted(array, key=lambda x: x[1]))
    ```
    
    - **여러 리스트에 map()으로 어떤 함수를 적용하여 별도의 리스트에 담을 때**
    
    ```python
    a = [1,2,3]
    b = [1,2,3]
    c = [1,2,3]
    print(list(map(lambda a, b, c: a+b+c, a, b, c)))
    ```
    

### 코테 유용한 표준 라이브러리

- itertools : 반복되는 형태의 데이터를 처리하기 위한 유용한순열
    - 순열, 조합 라이브러리가 자주 사용된다!
        - **완전 탐색 문제에서 코드 단축을 도와준다**.
    - 아래 설명 작성함.
- heapq : 힙 자료구조 제공
    - 우선순위 큐 기능 구현을 위해 사용된다!
    - **다익스트라 최단경로알고리즘에서 사용된다!**
- bisect : 이진 탐색 기능 제공
    - 기본적인 이진 탐색 기능 필요할 때 사용된다!
- collections : deque, Counter 등 유용한 자료구조 포함
    - Counter은 아래 설명 작성함
- math : 수학적 기능 제공
    - 팩토리얼, 제곱근, 최대공약수GCD, 삼각함수, 파이
- 자주 사용되는 내장 함수들

### 자주 사용되는 내장 함수

- `sum(), min(), max()`
    - 파라미터에 숫자를 바로 넣어도되고, 리스트를 넣어도 됨
- `eval("(1+2) *3+5")`  → 14출력
    - 수식으로 표현된 식을 계산한 값을 반환해줌
- `sorted(배열, key=함수)`, `sorted(리스트같은 반복가능 객체)`

### 순열과 조합

- 순열 : 서로 다른 n개에서 서로 다른 r개 선택해서 일렬로 나열
    - abc와 bac는 다른 것임
    
    ```python
    from itertools import permutations
    
    data = ['a', 'b', 'c']
    
    print(list(permutatio리스트 
    ```
    
- 조합 : 서로 다른 n개에서 순서 상관없이 r개 선택
    - abc와 bac는 같은 것임
    
    ```python
    from itertools import combinations
    
    data = ['a', 'b', 'c']
    
    print(list(combinations(data, 3))) # data에서 3개를 뽑는 조합 구하기
    ```
    
- 중복 순열

`from itertools import product`

`product(리스트, repeat=2)` → 2개를 뽑는 모든 순열 구하기 (중복 허용)

- 중복 조합

`from itertools import combinations_with_replacement` 

`combinations_with_replacement(리스트, 2)` → 2개를 뽑는 모든 조합 구하기(중복 허용)

### 🔥Counter🔥

리스트같은 iterable 객체에서 내부의 원소가 몇 번씩 등장했는지 알려주는 collections 라이브러리의 함수

```python
from collections import Counter

counter = Counter(['a', 'b', 'c', 'a', 'a'])

print((counter['a'])) # 3 출력
print(dict(counter)) # {'a' : 3, 'b' : 1, 'c' : 1} 출력
print(counter) # Counter({'a': 3, 'b': 1, 'c': 1}) 출력
```

### 🔥최대 공약수와 최소 공배수🔥

- 최대 공약수 → math 라이브러리의 gcd() 함수
- 최소 공배수 → 두 수 곱한것을 최대공약수로 나눈 몫

```python
import math

def lcm(a, b):
	return a*b // math.gcd(a,b)

print(math.gcd(21, 14)) # 최대 공약수
print(lcm(21, 14)) # 최소 공배수
```
